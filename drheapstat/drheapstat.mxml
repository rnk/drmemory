<?xml version="1.0"?>
<!--
# **********************************************************
# Copyright (c) 2009-2010 VMware, Inc.  All rights reserved.
# **********************************************************

# Dr. Memory: the memory debugger
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; 
# version 2.1 of the License, and no later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Library General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Dr. HeapStat: the memory profiler
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
    pageTitle="Dr. HeapStat Visualization Tool">

    <mx:Script>
        <![CDATA[
        import flash.errors.*;
        import flash.events.Event;
        import flash.net.Socket;
        import mx.effects.Pause;
        import mx.events.ListEvent;
        import mx.charts.HitData;
        import mx.charts.events.ChartItemEvent;
        import mx.collections.ArrayCollection;
        import mx.managers.CursorManager;

        /* Defined once to avoid repeated creation/deletion for each socket
         * read.  For some odd reason, recreating this object just bogs the
         * system down - too much memory is used - gc and paging just make the
         * whole machine unusable.
         */
        private var sleeper:Pause = new Pause();
        private var dataSock:Socket;

        /* These 3 variables are needed to avoid having to store the entire
         * snapshot XML after displaying it; these values are used during and
         * after displaying the snapshot.
         */
        private var snapshotIdShown:int;
        private var graphDataIndexSelected:int;     /* PR 584621 */
        private var totCstacksInSnapshot:int;

        [Bindable] private var cstackHdrsShown:ArrayCollection;
        private var cstackHdrsShownLo:int = 0;
        private var cstackHdrsShownHi:int = 0;
        private var numCstackHdrsShown:int = 50;
        [Bindable] private var srcFilesShown:ArrayCollection;   /* PR 584617 */

        /* These arrays are initialized each time a snapshot summary is
         * received from the server.
         */
        [Bindable] private var xAxisData:Array;
        [Bindable] private var appMemReq:Array;
        [Bindable] private var appMemPad:Array;
        [Bindable] private var appMemTot:Array;
        [Bindable] private var appMemStale:Array;

        [Bindable] private var showAppMemReqGraph:Boolean = true;
        [Bindable] private var showAppMemPadGraph:Boolean = true;
        [Bindable] private var showAppMemTotGraph:Boolean = true;
        [Bindable] private var showAppMemStaleGraph:Boolean = true;

        private var haveStale:Boolean = false;
        private var sliderInit:Boolean = false;

        /* To handle large number of snapshots, the vistool queries small 
         * sets of snapshots on the fly (as opposed to once as we did 
         * before) from the server.  This causes performance slowdowns when 
         * the slider's thumbs are moved too fast because too many socket 
         * queries are generated (it is the nesting of the slider thumb 
         * movement events coupled with socket queries that bogs the system 
         * down).  Using the bool and the two arrays defined below, intermediate
         * queries that end up being discarded are avoided, thus improving 
         * performance.  PR 581809.
         */
        private var SSQueryInProgress:Boolean = false;
        private var newSliderPos:Array;
        private var curSliderPos:Array;

        private function readSummary(event:Event):void {
            /* TODO: move socket setup & summary reading to mxml load
             * complete event  & get rid of "load data" button.
             */
            /* make log: dbg.text += "\n" + Security.sandboxType + "\n"; */

            dataSock = new Socket();
            dataSock.addEventListener(Event.CONNECT, dataSockConnHndlr);
            dataSock.addEventListener(Event.CLOSE, dataSockCloseHndlr);
            dataSock.addEventListener(ProgressEvent.SOCKET_DATA,
                                      dataSockDataHndlr);
            dataSock.addEventListener(IOErrorEvent.IO_ERROR, dataSockIOHndlr);
            dataSock.addEventListener(SecurityErrorEvent.SECURITY_ERROR,
                                      dataSockSecHndlr);
            try {
                dataSock.connect("127.0.0.1", 23456);
            }
            catch (e:Error) {
                /* Errors should be just a message or Alert.show()? */
                dbg.text += "socket open error: " + e.message + "\n";
            }       
        }

        private function sendMsg(type:String):void {
            try {
                dataSock.writeUTFBytes(type);
            }
            catch (e:Error) {
                dbg.text += "socket write error: " + e.message + "\n";
            }       
            /* make log: dbg.text += "sent out message: " + type + "\n"; */
            dataSock.flush();
        }

        private function recvMsg():String {
            /* Set to "" else the strcat below prepends a NULL to the string */
            var fullMsg:String = "";
            var partMsg:String;
            var size:uint = 0;
            var sofar:uint = 0;
            var tries:uint = 10;
            sleeper.duration = 1000;
            while (tries > 0) {
                /* make log: dbg.text += "bytes available to read: " + dataSock.bytesAvailable + "\n"; */
                try{
                    size = dataSock.readUnsignedInt();
                    /* make log: dbg.text += "socket read of uint: " + size + "\n"; */
                    break;
                }
                catch (e:Error) {
                    dbg.text += "socket read error: " + e.message + "\n";
                    tries--;
                    sleeper.play();
                }
            }

            while (sofar != size) {
                /* make log: dbg.text += "bytes available to read: " + dataSock.bytesAvailable + "\n";
                dbg.text += "trying to read a " + size + " byte string\n"; */
                try {
                    partMsg = dataSock.readUTFBytes(size - sofar);
                    if (partMsg.length > 0) {
                        fullMsg += partMsg;
                        sofar += partMsg.length;
                    }
                    /* dbg.text += "socket read of str: " + partMsg + "\n";
                    dbg.text += "read " + partMsg.length + " bytes\n"; */
                }
                catch (e:Error) {
                    dbg.text += "socket read error: " + e.message + "\n";
                }
            }
            return fullMsg;
        }

        /* When the connection with the server has been established, the 
         * first and only thing to do without user input is to get the 
         * summary data and display it.  This routine is the callback 
         * handler which is invoked upon a successful socket connection.  
         * It sends out the request for the summary.  The result is read 
         * by the callback handler (dataSockDataHndlr) which is invoked 
         * when data is available from the socket to read.
         * Note: at this point the number of snapshots available is unknown, so
         * the request is sent as "from zero to zero".
         */
        private function dataSockConnHndlr(event:Event):void {
            sendMsg("summary:0-0\n");
        }

        /* Callback handler which is invoked when data from the server is 
         * available to read.  It detects the type of xml sent and invokes 
         * the appropriate processing routine.
         */
        private function dataSockDataHndlr(event:Event):void {
            var sockData:XML;
            var xmlName:String;

            /* make log: dbg.text += "data ready: " + event + "\n"; */
            sockData = XML(recvMsg());
            xmlName = sockData.localName();
            /* dbg.text += "read XML: " + xmlName + "\n"; */
            /* dbg.text += "XML data: " + sockData.toString() + "\n"; */
            if (xmlName == "snapshot_summary") {
                showSnapshotSummary(sockData);
            } else if (xmlName == "snapshot") {
                showSnapshot(sockData);
            } else if (xmlName == "callstack") {
                showCallstack(sockData);
            } else {
                dbg.text += "Unknown xml received: " + xmlName + "\n";
            }
        }

        private function dataSockCloseHndlr(event:Event):void {
        }

        private function dataSockIOHndlr(event:IOErrorEvent):void {
            dbg.text += "io error handler:\n" + event;
        }

        private function dataSockSecHndlr(event:SecurityErrorEvent):void {
            dbg.text += "security error handler:\n" + event;
        }

        /* PR 588000 - consolidate all hover data into one balloon for easy
         * viewing and use the correct data (the default one will use the wrong
         * data).
         */
        private function setSnapshotHoverInfo(hitData:HitData):String {
            var index:int = hitData.chartItem.index;
            var balloonData:String;
            balloonData = "<b>Snapshot</b> #" + xAxisData[index] +
                          "\n<b>Memory allocated:</b> " + appMemReq[index] +
                          "\n<b>+ Padding:</b> " + appMemPad[index] +
                          "\n<b>+ Heap headers:</b> " + appMemTot[index];
            if (haveStale) {
                balloonData += "\n<b>Stale:</b> " + appMemStale[index];
            }
            return balloonData;
        }

        private function showSnapshotSummary(summary:XML):void {
            if (summary.@hasStale == "yes") {
                haveStale = true;
            }

            /* Clear out last snapshot summary.  GC will reap the arrays. */
            xAxisData = new Array();
            appMemReq = new Array();
            appMemPad = new Array();
            appMemTot = new Array();
            appMemStale = new Array();

            for each (var snapshot:XML in summary.snapshot) {
                xAxisData.push(parseInt(snapshot.@id));
                appMemReq.push(parseInt(snapshot.@totMemReq));
                appMemPad.push(parseInt(snapshot.@totMemPad));
                appMemTot.push(parseInt(snapshot.@totMemTot));
                /* dbg.text += "snapshot data: " + snapshot + "\n"; */

                /* Populate staleness graph data array if such data is
                 * available.
                 */
                if (haveStale) {
                    appMemStale.push(parseInt(snapshot.@totMemStale));
                }
            }

            /* The slider's thumbs must be initialized only once, at the time
             * when the first snapshots summary graph info is obtained.
             */
            if (!sliderInit) {
                if (haveStale) {
                    /* Show since when the memory has been stale. */
                    appMemStaleGraphLine.displayName += " " + summary.@staleType +
                                                        " " + summary.@staleTime +
                                                        " " + summary.@xAxisLabel;
                } else {
                    appMemStaleGraphLine.displayName += " (no data available)";
                }
                xAxisInfoDisplay.text = "Interval between snapshots " +
                                        "(i.e., X axis) is in " + 
                                        summary.@xAxisLabel;

                hSlider.minimum = 0;
                hSlider.maximum = summary.@totSnapshots;
                hSlider.values[0] = 0;
                hSlider.values[1] = summary.@totSnapshots;
                sliderInit = true;
            }

            /* If the slider thumbs were moved when the vistool was processing
             * data from the server for a previous snapshots summary query,
             * then issue another query based on new slider thumb positions.
             * Otherwise we are done.
             */
            if (newSliderPos[0] == curSliderPos[0] &&
                newSliderPos[1] == curSliderPos[1]) {
                /* Set this last to prevent another slider event from updating
                 * potential future code above inside the 'if' block.  No locks
                 * in Flex, it is single threaded.
                 */
                SSQueryInProgress = false;
            } else {
                /* Don't have an assert() in flex SDK.  Not worth defining one
                 * just for this.  FIXME: if more asserts are used define an
                 * assert.  Also, in this case, it might still work, so no
                 * point in crashing the process.
                 */
                if (!SSQueryInProgress) {
                    dbg.text += "trying to send a snapshot summary request\n" +
                                "when the previous one isn't done!\n";
                }
                sendMsg("summary:" +
                        curSliderPos[0] + "-" + curSliderPos[1] + "\n");
            }
        }

        private function getSnapshot(event:ChartItemEvent):void
        {
            /* Store information about the snaphot selected: the index of the
             * graph data (PR 584621) and the snapshot ID.
             */
            graphDataIndexSelected = event.hitData.chartItem.index;
            snapshotIdShown = xAxisData[graphDataIndexSelected];

            cstackHdrsShownLo = 1;  /* callstack IDs start from 1, not 0 */
            cstackHdrsShownHi = numCstackHdrsShown;

            /* loading a snapshot takes a while, let the user know */
            CursorManager.setBusyCursor();

            sendMsg("snapshot:" + snapshotIdShown + ":" +
                    cstackHdrsShownLo + "-" + cstackHdrsShownHi + "\n");
        }

        private function showSnapshot(snapshot:XML):void
        {
            /* Clear out the call stack window so that a call stack that might
             * have been displayed before (belonging to another snapshot) is
             * still not visible after the new snapshot's details are shown.
             * If not cleared, it is misleading.  PR 512306.
             */
            cstackWindow.text = "";

            totCstacksInSnapshot = parseInt(snapshot.@numCallstacks);

            /* If fewer callstacks are available than the default request of 50,
             * adjust accordingly.
             */
            if (totCstacksInSnapshot < numCstackHdrsShown) {
                cstackHdrsShownHi = totCstacksInSnapshot;
            }

            snapshotInfoDisplay.text = "Snapshot #" + snapshotIdShown +
                                       "        Unique callstacks: " +
                                       totCstacksInSnapshot +
                                       "\nTotal memory allocated: " +
                                       appMemReq[graphDataIndexSelected] +
                                       "        + Padding: " +
                                       appMemPad[graphDataIndexSelected] +
                                       "        + Heap headers: " +
                                       appMemTot[graphDataIndexSelected];
            if (haveStale) {
                snapshotInfoDisplay.text += "        Stale: " + 
                                            appMemStale[graphDataIndexSelected];
            }

            /* FIXME: sorting type is hard coded for now as we do only one
             * type of sorting
             */
            cstackHdrsStatusWindow.text = "Displaying callstacks " + 
                                          cstackHdrsShownLo + " to " + 
                                          cstackHdrsShownHi + ".  " +
                                          "Sorted by: (Mem + Pad + Headers)";

            /* Populate the data source for the call stack header table.  Clear
             * old data with a new object; gc will handle freeing
             */
            cstackHdrsShown = new ArrayCollection();
            
            for each (var callstack:XML in snapshot.callstack) {
                /* Depending upon whether staleness data is available or not, 
                 * change what type of data gets added to cstackHdrsShown.  If
                 * using a generic value of 0 for "not available", the user gets
                 * confused as to whether staleness data was there and nothing
                 * was stale or there was no staleness data.  The simplest is
                 * to leave the stale column blank if there is no staleness
                 * data.  For that cstackHdrsShown should be populated with a
                 * struct that has no staleness element.
                 */
                if (haveStale) {
                    cstackHdrsShown.addItem({id: parseInt(callstack.@id), 
                                             sym: callstack.@hdr, 
                                             num: parseInt(callstack.@num), 
                                             memReq: parseInt(callstack.@memReq),
                                             memPad: parseInt(callstack.@memPad),
                                             memTot: parseInt(callstack.@memTot),
                                             memStale: parseInt(callstack.@memStale)});
                } else {
                    cstackHdrsShown.addItem({id: parseInt(callstack.@id), 
                                             sym: callstack.@hdr, 
                                             num: parseInt(callstack.@num), 
                                             memReq: parseInt(callstack.@memReq),
                                             memPad: parseInt(callstack.@memPad),
                                             memTot: parseInt(callstack.@memTot)});
                }
            }

            /* Now populate the data source for the file table in the
             * file-grouping tab.  Clear old data with a new object; gc will
             * handle freeing.  PR 584617.
             */
            srcFilesShown = new ArrayCollection();
            for each (var srcFile:XML in snapshot.srcFile) {
                /* Just like in the loop above create different data elements
                 * in the array collection if stalenes info is available.
                 */
                if (haveStale) {
                    srcFilesShown.addItem({name: srcFile.@name, 
                                           memReq: parseInt(srcFile.@memReq),
                                           memPad: parseInt(srcFile.@memPad),
                                           memTot: parseInt(srcFile.@memTot),
                                           memStale: parseInt(srcFile.@memStale)});
                } else {
                    srcFilesShown.addItem({name: srcFile.@name, 
                                           memReq: parseInt(srcFile.@memReq),
                                           memPad: parseInt(srcFile.@memPad),
                                           memTot: parseInt(srcFile.@memTot)});
                }

            }
            CursorManager.removeBusyCursor();
        }

        private function getCallstack(event:ListEvent):void
        {
            var cstackId:int = cstackHdrsShown[event.rowIndex].id;
            sendMsg("callstack:" + cstackId + "\n");
        }

        private function showCallstack(callstack:XML):void
        {
            cstackWindow.text = "callstack #" + callstack.@id + "\n";
            for each (var frame:XML in callstack.frame) {
                cstackWindow.text += "\t" + frame.symbol + "\n";
                cstackWindow.text += "\t\t" + frame.file + "\n";
            }
        }

        private function prevCstacks(event:Event):void {
            if (cstackHdrsShownLo == 0 || cstackHdrsShownHi == 0) {
                cstackHdrsStatusWindow.text = "No snapshot selected";
                return;
            }
            if (cstackHdrsShownLo == 1) {
                cstackHdrsStatusWindow.text = "Already at top of call stack";
                return;
            }
            if (cstackHdrsShownLo - numCstackHdrsShown < 1) {
                cstackHdrsShownLo = 1;
                cstackHdrsShownHi = numCstackHdrsShown;
                if (totCstacksInSnapshot < numCstackHdrsShown) {
                    cstackHdrsShownHi = totCstacksInSnapshot;
                }
                cstackHdrsStatusWindow.text = "Reached top of call stack";
            } else {
                cstackHdrsShownLo -= numCstackHdrsShown;
                cstackHdrsShownHi -= numCstackHdrsShown;
            }

            /* loading a snapshot takes a while, let the user know */
            CursorManager.setBusyCursor();

            sendMsg("snapshot:" + snapshotIdShown + ":" +
                    cstackHdrsShownLo + "-" + cstackHdrsShownHi + "\n");
        }

        private function nextCstacks(event:Event):void {
            if (cstackHdrsShownLo == 0 || cstackHdrsShownHi == 0) {
                cstackHdrsStatusWindow.text = "No snapshot selected";
                return;
            }

            if (cstackHdrsShownHi == totCstacksInSnapshot) {
                cstackHdrsStatusWindow.text = "Already at bottom of call stack";
                return;
            }
            if (cstackHdrsShownHi + numCstackHdrsShown > totCstacksInSnapshot) {
                cstackHdrsShownHi = totCstacksInSnapshot;
                cstackHdrsShownLo = cstackHdrsShownHi - numCstackHdrsShown;
                cstackHdrsStatusWindow.text = "Reached bottom of call stack";
            } else {
                cstackHdrsShownLo += numCstackHdrsShown;
                cstackHdrsShownHi += numCstackHdrsShown;
            }

            /* loading a snapshot takes a while, let the user know */
            CursorManager.setBusyCursor();

            sendMsg("snapshot:" + snapshotIdShown + ":" +
                    cstackHdrsShownLo + "-" + cstackHdrsShownHi + "\n");
        }

        private function changeSize():void
        {
            /* Not worth zooming for less than 5 data points. */
            if ((hSlider.values[1] - hSlider.values[0] + 1) <= 5) { 
                return;
            }

            /* Don't make a query when one is already in progress.  Even 
             * though liveDragging is disabled, the slider can generate a lot of
             * events if the user keeps on moving and releasing the slider 
             * thumbs quickly.  This leads to multiple events in succession 
             * which in turn result in multiple queries to the server.  Doing 
             * queries when multiple events get generated just freezes the 
             * machine (the flash player goes into rapid cpu and memory 
             * consumption mode and bogs the machine down).  PR 581809.
             *
             * Note: though this fix handles the case of the user moving the 
             * slider thumbs many times quickly using the mouse, it doesn't 
             * handle it when they do it with the keyboard - it still hangs.  
             * Luckily, a person using the slider thums using the keyboard and 
             * rapidly changing it will not be a common thing, so we should be 
             * fine.  Still need to re-think zooming to control this event 
             * overload problem.  FIXME.
             */
            if (SSQueryInProgress) {
                /* Just store the current thumb positions. */
                curSliderPos = hSlider.values;
            } else {
                /* Set the bool immediately after check.  No locks in flex.
                 * It is single threaded.
                 */
                SSQueryInProgress = true;
                newSliderPos = hSlider.values;
                curSliderPos = hSlider.values;
                sendMsg("summary:" +
                        hSlider.values[0] + "-" + hSlider.values[1] + "\n");
            }
        }
        ]]>
    </mx:Script>

    <!-- For the staleness line we want to show the area grayed out which 
         gives the user a good visual indication of ratio of memory actually 
         used versus stale.  In order to do this, we have to use an AreaSeries 
         instead of LineSeries and define what color to fill the graph area 
         with and the level of transparency.  
         Note: defining area fill color forces defining graph line colors too, 
               else they show up as the same color as the fill color.
     -->
    <mx:SolidColor id="appMemStaleFillColor" color="black" alpha="0.1"/>
    <mx:Stroke id = "appMemStaleLineColor" color="gray" weight="3"/>


    <mx:Button label="Load data" click="readSummary(event);"/>
    <mx:HBox width="100%">
        <mx:VBox>
            <mx:Panel
                title="Memory consumption over full process lifetime"
                layout="horizontal" width="450" height="70%" paddingTop="10"
                paddingBottom="10" paddingLeft="10" paddingRight="10">
            <mx:VBox>
                <mx:LineChart
                    id="snapshotGraph" height="100%" width="100%"
                    paddingLeft="5" paddingRight="5"
                    showDataTips="true" dataTipMode="single"
                    dataTipFunction="setSnapshotHoverInfo"
                    itemClick="getSnapshot(event);">
                    <mx:horizontalAxis>
                        <mx:CategoryAxis
                            categoryField="Time/Snapshot No"
                            dataProvider="{xAxisData}"/> 
                    </mx:horizontalAxis>
                    <mx:series>
                        <mx:LineSeries
                            form="curve" dataProvider="{appMemReq}" 
                            visible="{showAppMemReqGraph}"
                            displayName="Memory allocated (requested) by process"/>
                        <mx:LineSeries 
                            form="curve" dataProvider="{appMemPad}"  
                            visible="{showAppMemPadGraph}"
                            displayName="Memory allocated by process + Padding"/>
                        <mx:LineSeries 
                            form="curve" dataProvider="{appMemTot}" 
                            visible="{showAppMemTotGraph}"
                            displayName="Memory allocated by process + Padding + Heap headers"/>
                        <mx:AreaSeries 
                            id="appMemStaleGraphLine"
                            form="curve" dataProvider="{appMemStale}" 
                            visible="{showAppMemStaleGraph}"
                            areaStroke="{appMemStaleLineColor}"
                            areaFill="{appMemStaleFillColor}"
                            displayName="Memory that has been stale"/>
                    </mx:series>
                </mx:LineChart>
                <mx:Text id="xAxisInfoDisplay" width="100%"/>

                <!-- Keep liveDragging off else even the slightest fast move 
                     of the slider will result in massive memory and cpu usage 
                     by flex.  This happens only because a new snapshots 
                     summary request is sent out each time there is a slider 
                     event.  If it is just changing the binding array, then it 
                     is fine.  PR 581809.
                 -->
                <mx:HSlider
                    id="hSlider" minimum="0" percentWidth="100"
                    dataTipPlacement="top" tickColor="black" allowTrackClick="true"
                    snapInterval="1" tickInterval="10" labels="['0%','100%']" 
                    thumbCount="2" liveDragging="false" change="changeSize();"
                    creationComplete="{hSlider.minimum = 0;
                                       hSlider.maximum = 0;
                                       hSlider.values[0] = 0;
                                       hSlider.values[1] = 0}"/>

                <mx:HBox>
                    <mx:VBox paddingTop="6">
                        <mx:CheckBox
                            id="showAppMemGraphCB" selected="true"
                            click="showAppMemReqGraph = showAppMemGraphCB.selected;"/>
                        <mx:CheckBox
                            id="showAppMemPadGraphCB" selected="true"
                            click="showAppMemPadGraph = showAppMemPadGraphCB.selected;"/>
                        <mx:CheckBox id="showAppMemTotGraphCB" selected="true"
                            click="showAppMemTotGraph = showAppMemTotGraphCB.selected;"/>
                        <mx:CheckBox id="showAppMemStaleGraphCB" selected="true"
                            click="showAppMemStaleGraph = showAppMemStaleGraphCB.selected;"/>
                    </mx:VBox>
                    <mx:Legend dataProvider="{snapshotGraph}"/>
                </mx:HBox>
            </mx:VBox>
            </mx:Panel>
            <mx:Panel
                title="Messages" layout="horizontal" width="450" height="30%"
                paddingTop="10" paddingBottom="10" paddingLeft="10"
                paddingRight="10">
                    <mx:TextArea id="dbg" width="100%" height="96">
                    </mx:TextArea>
            </mx:Panel>
        </mx:VBox>

        <mx:Panel
            title="Memory consumption for the selected snapshot"
            layout="horizontal" width="750" height="100%" paddingTop="10">
            <mx:VBox width="100%" height="100%">
                <mx:Text
                    id="snapshotInfoDisplay" fontSize="10"
                    color="#000080" width="100%"
                    text="Snapshot#    Unique callstacks:    Total memory allocated:    +Padding:    +Headers:    Stale:"/>
                <!-- PR 584617 - breakdown memory usage by file -->
                <mx:TabNavigator
                    width="100%" height="100%"
                    paddingTop="10" paddingBottom="10"
                    paddingLeft="10" paddingRight="10">
                    <mx:VBox width="100%" height="100%"
                        label="Grouping by call stacks">
                        <mx:VBox>
                            <mx:HBox width="100%">
                                <mx:Button 
                                     label="Prev 50 callstacks"
                                     click="prevCstacks(event);"/>
                                <mx:Text id="cstackHdrsStatusWindow" width="65%"/>
                                <mx:Button
                                     label="Next 50 callstacks"
                                     click="nextCstacks(event);"/>
                            </mx:HBox>
                            <mx:DataGrid
                                id="ssCstackList" width="100%" rowCount="10"
                                dataProvider="{cstackHdrsShown}"
                                itemClick="getCallstack(event);">
                                <mx:columns>
                                    <mx:DataGridColumn
                                        width="50" dataField="id"
                                        headerText="Call stack ID"/>
                                    <mx:DataGridColumn
                                        width="370" dataField="sym"
                                        headerText="Snippet of top of call stack"/>
                                    <mx:DataGridColumn
                                        textAlign="right" width="60"
                                        dataField="num" headerText="No. seen"/>
                                    <mx:DataGridColumn
                                        textAlign="right" width="60"
                                        dataField="memReq" headerText="Mem"/>
                                    <mx:DataGridColumn
                                        textAlign="right" width="60"
                                        dataField="memPad" headerText="+ Pad"/>
                                    <mx:DataGridColumn
                                        textAlign="right" width="60"
                                        dataField="memTot" headerText="+ Headers"/>
                                    <mx:DataGridColumn
                                        textAlign="right" width="60"
                                        dataField="memStale" headerText="Stale"/>
                                </mx:columns>
                            </mx:DataGrid>
                            <mx:TextArea
                                id="cstackWindow" width="100%" height="400"/>
                        </mx:VBox>
                    </mx:VBox>
                    <!-- There is no direct way to make the group-by-file tab 
                         conditionally visible.  Also, the condition will be 
                         known only after the first contact with the server, 
                         so this tab will be visible even if -group_by_file 
                         isn't specified till the first contact with the server.
                         Even afterwards, looks like I'd have to manipulate this
                         VBox object directly to make it disappear - I spent a
                         while and couldn't find out.  Worth looking at when we
                         have time - not a major issue now.
                     -->
                    <mx:VBox
                        width="100%" height="100%"
                        label="Grouping by source files">
                        <mx:DataGrid
                            id="srcFilesList" width="100%" rowCount="28"
                            dataProvider="{srcFilesShown}">
                            <mx:columns>
                                <mx:DataGridColumn
                                    width="460" 
                                    dataField="name" headerText="Source file"/>
                                <mx:DataGridColumn
                                    textAlign="right" width="60"
                                    dataField="memReq" headerText="Mem"/>
                                <mx:DataGridColumn
                                    textAlign="right" width="60"
                                    dataField="memPad" headerText="+ Pad"/>
                                <mx:DataGridColumn
                                    textAlign="right" width="60"
                                    dataField="memTot" headerText="+ Headers"/>
                                <mx:DataGridColumn
                                    textAlign="right" width="60"
                                    dataField="memStale" headerText="Stale"/>
                            </mx:columns>
                        </mx:DataGrid>
                    </mx:VBox>
                </mx:TabNavigator>
            </mx:VBox>
        </mx:Panel>
    </mx:HBox>
</mx:Application>
