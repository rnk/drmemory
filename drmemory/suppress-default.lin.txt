# **********************************************************
# Copyright (c) 2010-2012 Google, Inc.  All rights reserved.
# Copyright (c) 2009-2010 VMware, Inc.  All rights reserved.
# **********************************************************
#
# Dr. Memory: the memory debugger
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; 
# version 2.1 of the License, and no later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
###########################################################################
# Dr. Memory default suppression file

##################################################
# known bitfield suppressions (PR 488813)

UNINITIALIZED READ
name=default (libc bitfield)
libc.so.*!maybe_split_for_insert

##################################################
# Python suppressions (PR 523512)
# Can be in libpython* or python executable so we use "*python*"

UNADDRESSABLE ACCESS
name=default (python malloc)
*python*!PyObject_Free

UNADDRESSABLE ACCESS
name=default (python malloc)
*python*!PyObject_Realloc

##################################################
# loader suppressions (PR 525272)

# PR 530857: this is a real bug in the loader
# if have debuginfo shows up as elf_dynamic_do_rel{,a}
# else shows up as _dl_relocate_object
# or on FC12 I see ".L259" and ".L202"!
UNINITIALIZED READ
name=default (ld-linux real bug)
ld-linux.so.2!*
ld-linux.so.2!dl_open_worker
ld-linux.so.2!_dl_catch_error

##########
# loader has own copy of strlen and not exported so we aren't able to
# replace it (PR 486382 should address that once have online symbols).
# we use a wildcard instead of "strlen" since addr2line
# crashes on strlen addresses on Fedora 12 (PR 530836).

UNADDRESSABLE ACCESS
name=default (ld-linux strlen)
ld-linux.so.2!*
ld-linux.so.2!_dl_map_object_from_fd
ld-linux.so.2!_dl_map_object

UNINITIALIZED READ
name=default (ld-linux strlen)
ld-linux.so.2!*
ld-linux.so.2!_dl_map_object_from_fd
ld-linux.so.2!_dl_map_object

UNINITIALIZED READ
name=default (ld-linux strlen)
ld-linux.so.2!*
ld-linux.so.2!_dl_map_object

UNINITIALIZED READ
name=default (ld-linux strlen)
ld-linux.so.2!*
ld-linux.so.2!_dl_open
libdl.so.2!dlopen_doit
ld-linux.so.2!_dl_catch_error

# On FC16 addr2line does not crash and subsequent frames
# do not match those above.
UNINITIALIZED READ
name=default (ld-linux strchr)
ld-linux.so.2!strchr
ld-linux.so.2!*

UNINITIALIZED READ
name=default (ld-linux strlen)
ld-linux.so.2!strlen
ld-linux.so.2!*

##########
# i#79: with more recent versions of the loader we see both uninit and
# unaddr with stacks like these.  XXX: track down and verify whether real
# bugs.

UNADDRESSABLE ACCESS
name=default i#79 (ld-linux)
...
ld-linux.so.2!_dl_rtld_di_serinfo
ld-linux.so.2!*

UNINITIALIZED READ
name=default i#79 (ld-linux)
...
ld-linux.so.2!_dl_make_stack_executable
...
ld-linux.so.2!_dl_rtld_di_serinfo

UNADDRESSABLE ACCESS
name=default i#79 (ld-linux)
ld-linux.so.2!*

##################################################
# glibc out-of-bounds memory access (PR 532762):
# this is a real bug in glibc

UNADDRESSABLE ACCESS
name=default (libc real bug)
libc.so.*!_Unwind_IteratePhdrCallback

##################################################
# loader deliberately stores index+1 (PR 535646):

POSSIBLE LEAK
name=default (ld-linux stores index+1)
ld-linux.so.2!allocate_dtv

# some versions have this
POSSIBLE LEAK
name=default (ld-linux stores index+1)
ld-linux.so.2!allocate_and_init

# with no debug symbols this shows up as:
POSSIBLE LEAK
name=default (ld-linux stores index+1)
ld-linux.so.2!_dl_allocate_tls

# in Ubuntu 11.11 with no debug symbols this shows up as:
POSSIBLE LEAK
name=default (ld-linux stores index+1)
ld-linux.so.2!_dl_mcount
ld-linux.so.2!_dl_allocate_tls_storage
libpthread.so.0!allocate_stack

##################################################
# i#717: eglibc loader seems to have a one time leak
# FIXME i#720: If we believe this is a one time leak we should limit it to only
# suppress one report.
LEAK
name=default (one-time eglibc ld-linux leak)
ld-linux.so.2!_dl_map_object_deps
ld-linux.so.2!dl_open_worker
...
libdl.so.2!__dlopen

##################################################
# PR 564660: libz optimized code
# Xref http://www.zlib.net/zlib_faq.html#faq36

UNINITIALIZED READ
name=default (libz optimized code)
libz.so.1!*
libz.so.1!*
libz.so.1!deflate

##################################################
# i#70: pthread_create -> __libc_thread_freeres -> arena_thread_freeres

UNADDRESSABLE ACCESS
name=default i#70 (pthread)
libc.so.6!*
libc.so.6!*
libpthread.so.0!start_thread

###########################################################################
