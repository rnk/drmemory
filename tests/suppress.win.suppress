# **********************************************************
# Copyright (c) 2010-2011 Google, Inc.  All rights reserved.
# Copyright (c) 2009-2010 VMware, Inc.  All rights reserved.
# **********************************************************
#
# Dr. Memory: the memory debugger
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; 
# version 2.1 of the License, and no later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# uninitialized read: plain
UNINITIALIZED READ
suppress.exe!do_uninit_read
suppress.exe!uninit_test1
suppress.exe!test
suppress.exe!main

# uninitialized read: middle-of-symbol wildcard
UNINITIALIZED READ
suppress.exe!do_u*t_read
suppress.exe!uninit_test2
suppress.exe!test

# uninitialized read: 4 top frames based mixed suppression + '?'
UNINITIALIZED READ
<suppress.exe+0x11??>
suppress.exe!uninit_test3
<suppress.exe+0x10??>
suppress.exe!main

# uninitialized read: mixed suppression with ... (...=0 frames)
UNINITIALIZED READ
<suppress.exe+0x11??>
...
suppress.exe!uninit_test4

# uninitialized read: ... + mod!func suppression
# "..." should match one frame 
UNINITIALIZED READ
...
suppress.exe!uninit_test5

# uninitialized read: ... + mod!func suppression 
# "..." should match five frames 
UNINITIALIZED READ
suppress.exe!do_uninit_read
...
suppress.exe!uninit_test6

# uninitialized read: ... + ? + mod!off suppression 
UNINITIALIZED READ
...
<su?pr?ss.exe+0x12??>

#-------------------------------------------------------------------------------

# unaddressable access: plain
UNADDRESSABLE ACCESS
suppress.exe!unaddr_test1
suppress.exe!test
suppress.exe!main

# unaddressable access: wildcard in module
#
UNADDRESSABLE ACCESS
suppress.exe!unaddr_test2

# unaddressable access: restrict based on instruction
UNADDRESSABLE ACCESS
# test trailing spaces here
instruction=mov    (%eax) -> %eax   
suppress.exe!unaddr_test3
suppress.exe!test
suppress.exe!main

# unaddressable access: top frame based mod!func suppression 
UNADDRESSABLE ACCESS
suppress.exe!unaddr_test4

#-------------------------------------------------------------------------------
# leak: plain
LEAK
suppress.exe!leak_test1
suppress.exe!test
suppress.exe!main

# leak: top frame
#
LEAK
suppress.exe!l*2

# leak: full callstack based mod!func suppression 
LEAK
suppress.exe!leak_test3
suppress.exe!test
suppress.exe!main

# leak: top frame based mod!func suppression 
LEAK
suppress.exe!leak_test4

# possible leak: top frame based mod!func suppression 
POSSIBLE LEAK
suppress.exe!possible_leak_test1

# possible leak: top frame based mod!func suppression 
LEAK
suppress.exe!possible_leak_test2

#-------------------------------------------------------------------------------

UNINITIALIZED READ
<not in a module>
suppress.exe!test

UNINITIALIZED READ
system call NtQueryVirtualMemory parameter value #1
kernel32.dll!VirtualQuery
suppress.exe!syscall_test

#-------------------------------------------------------------------------------

UNADDRESSABLE ACCESS
suppress.exe!invalid_free_test1

LEAK
suppress.exe!invalid_free_test1

INVALID HEAP ARGUMENT
...
suppress.exe!invalid_free_test1

WARNING
*!warning_test1
